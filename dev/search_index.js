var documenterSearchIndex = {"docs":
[{"location":"functions.html#Function-Documentation","page":"Function Documentation","title":"Function Documentation","text":"","category":"section"},{"location":"functions.html","page":"Function Documentation","title":"Function Documentation","text":"Modules = [Kelp]\nOrder = [:function, :type]","category":"page"},{"location":"functions.html#Main.Kelp.equations-NTuple{10, Any}","page":"Function Documentation","title":"Main.Kelp.equations","text":"Kelp.equations(t, a, n, c, u, temp, irr, ex_n, λ, resp_model, dt)\n\nSolves the papers main equations.\n\nParameters:\n\na: area /dm^2\nn: nitrate reserve /gN/gSW\nc: carbon reserve /gC/gSW\nu: water speed /m/s\ntemp: temperature /°C\nirr: irradiance / mol photons/m²/day\nex_n: external nitrate concentration /mmol m^3\nλ: normalised change in day length\nresp_model: choice of resparation model (see Kelp.r)\ndt: timestep length /days\n\nReturns:\n\nda: results of equation 1, the area rate\ndn: results of equation 7, the nitrogen rate\ndc: results of equation 9, the carbon rate\nj: the specific nitrate uptake rate\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.eval_j-Tuple{Any, Any, Any}","page":"Function Documentation","title":"Main.Kelp.eval_j","text":"Kelp.eval_j(ex_n,n,u)\n\nSolves Equation 8, the specific nitrate uptake rate.\n\nParameters:\n\nex_n: external nitrate concentration /mmol/m^3\nn: nitrogen reserve /gN/gSW\nu: water speed /m/s\n\nReturns: specific nitrate uptake rate\n\nNotes:\n\nNames eval_j because it looks better in Kelp.equations to have j and you can't reuse it\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.eval_μ-NTuple{5, Any}","page":"Function Documentation","title":"Main.Kelp.eval_μ","text":"Kelp.eval_μ(a,n,c,temp,λ)\n\nSolves Equation 2, the specific growth rate.\n\nParameters:\n\na: area /dm^2\nn: nitrate reserve /gN/gSW\nc: carbon reserve /gC/gSW\ntemp: temperature /°C\nλ: normalised change in day length\n\nReturns: specific growth rate\n\nNotes:\n\nNames eval_μ because it looks better in Kelp.equations to have μ and you can't reuse it\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.extract_valid-Tuple{Any, Any, Any}","page":"Function Documentation","title":"Main.Kelp.extract_valid","text":"Kelp.extract_valid(raw,raw_time,fill)\n\nExtracts the valid values from an array by checking against a fill value and returns the valids and corresponding time.\n\nParameters:\n\nraw: the array to check\nraw_time: the corresponding time array\nfill: the fill value to check against\n\nReturns:\n\nvals: the filtered values\ntime: corresponding times\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.f_area-Tuple{Any}","page":"Function Documentation","title":"Main.Kelp.f_area","text":"Kelp.f_area(a)\n\nSolves Equation 3, the effect of area on growth\n\nParameters: a, area /dm^2\n\nReturns: effect of area on growth\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.f_photo-Tuple{Any}","page":"Function Documentation","title":"Main.Kelp.f_photo","text":"Kelp.f_photo(λ)\n\nSolves Equation 5, the seasonal influence on growth rate\n\nParameters: λ: normalised change in day length\n\nReturns: seasonal influence on growth\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.f_temp-Tuple{Any}","page":"Function Documentation","title":"Main.Kelp.f_temp","text":"Kelp.f_temp(temp)\n\nSolves Equation 4, the effect of temperature on growth\n\nParameters: temp: temperature /°C\n\nReturns: effect of temperature on growth\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.gen_λ-Tuple{Any}","page":"Function Documentation","title":"Main.Kelp.gen_λ","text":"Kelp.gen_λ(lat)\n\nGenerates λ as described in Model desctiptions/Main equations/Photoperiodic effect (page 763) in the origional paper.\n\nParameter: lat, the latitude\n\nReturns: array of normalised change in day length\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.get_ind-Tuple{Any, Any, Any}","page":"Function Documentation","title":"Main.Kelp.get_ind","text":"Kelp.get_ind(val, list, tol)\n\nFunction that finds the index in the list with the closest value to val. Error is thrown if no result is within tollerance, tol.\n\nParameters:\n\nval: the value searching for\nlist: the list to search\ntol: tollerance of search\n\nReturns:\n\n`index of closest valuea\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.interp_deps-NTuple{4, Any}","page":"Function Documentation","title":"Main.Kelp.interp_deps","text":"Kelp.interp_deps(arr, origional_depths, desired_depths, invalid_val)\n\nFunction to interpolate a 4D array in the last dimension. Useful for lineaising the depth steps of the arrays from Copurnicus as they have increasingly corse step sizes.\n\nParameters:\n\narr: the array to interpolate where the 3rd dimension is the one to interpolate along\norigional_depths: the values of the 3rd dimensions coordinates (the origional depths of the data)\ndesired_depths: the desired coordinates/depths\ninvalid_val: the fill value to replace with NaN in the array (as we are searching it anyway)\n\nReturns: new array with interpolated 3rd dimension\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.p-Tuple{Any, Any}","page":"Function Documentation","title":"Main.Kelp.p","text":"Kelp.p(temp,irr)\n\nSolves Equation 10, the gross photosynthesis.\n\nParameters:\n\ntemp: temperature /°C\nirr: irradiance /mol photons/m²/day\n\nReturns: gross photosynthesis function\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.r-NTuple{4, Any}","page":"Function Documentation","title":"Main.Kelp.r","text":"Kelp.r(temp,μ,j,resp_model)\n\nSolves Equation 14 (2012) if respmodel=1, or Equation 2 (2013) if respmodel=2\n\nParameters:\n\ntemp: temperature /°C\nμ: specific growth rate\nj: specific nitrate uptake rate\nresp_model: choice of resparation model (see description)\n\nReturns: respiration function\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.solvegrid","page":"Function Documentation","title":"Main.Kelp.solvegrid","text":"Kelp.solvegrid(t_i, nd, a_0, n_0, c_0, arr_lon, arr_lat, arr_dep, arr_time, no3, temp, u, par_data, kd_data, att = nothing, params=\"src/parameters/origional.jl\", resp_model=1, dt=1, progress=true)\n\nSolve the model for a (spacially) fixed grid of inputs.\n\nParameters:\n\nt_i: start day (w.r.t. t=0 in time)\nnd: number of days to run for\na_0: initial area/dm^2\nn_0: initial nitrogen reserve/gN/gSW\nc_0: initial carbon reserve/gC/gSW\narr_lon: longitudes for no3 and temp\narr_lat: latitudes for no3 and temp\narr_dep: depths for no3 and temp\narr_time: time for no3 and temp\nno3: array of no3 concentration in lon,lat,depth,time\ntemp: array of temp concentration in lon,lat,depth,time\nu: array of water speed in lon,lat,depth,time\npar_data: array of:\n`par values in lon,lat,time\n`corresponding time\n`par fill value\nkd_data: array of:\nkd values in lon,lat,time\ncorresponding time\nkd fill value\natt: array of light attenuation coefficients (PAR(z)=PAR(z=0)*att) in lon,lat,depth,time. Defaults to nothing and kd is used instead\nparams: string of the path to a parameters file, defaults to the 2012 values. Also supplied is 2013 in src/parameters/2013.jl or you can copy and vary them\nresp_model: choice of respiration model, 1 (default) uses the 2012 version and 2 uses the modifcations from the 2013 paper\ndt: the time step size to use (see equations! note), default is 1 day (seems small enough)\nprogress: option to update progress at each level (when multithreading not accurate but useful), defaults to true\n\nReturns: results as an array of (area/nitrogen/carbon/nitrate update, lon, lat, depth, time)\n\nNotes: par and kd need their own time coordinates and fill value because they come from satelite observation which are  temporally sparse so need to be checked and interpolated in time for each point. On the other hand temp and no3 (that I'm using) are from Copurnicus' models so if a point has a value at some time it will at all times.\n\nno3,temp and u need to be of the same shape and size and with the values corresponding to the same position/time.\n\n\n\n\n\n","category":"function"},{"location":"functions.html#Main.Kelp.solvekelp","page":"Function Documentation","title":"Main.Kelp.solvekelp","text":"Kelp.solvekelp(t_i, nd, u, temp, irr, ex_n, lat, a_0, n_0, c_0, params=\"src/parameters/origional.jl\", resp_model=1, dt=1, dataframe=true)\n\nSolves the model for some set of parametetrs and returns the ODE library solution as well as a dataframe of the useful results.\n\nParameters:\n\nt_i: th estart time (in days since the start of the interpolation objects \"day zero\")\nnd: the number of days to run for\nu: interpolation object (IO) of water speed\ntemp: IO of temperature\nex_n: IO of external nitrate concentration\nlat: latitude, relivant for the change of day length\na_0: initial area\nn_0: initial nitrogen reserve (gN/gSW)\nc_0: initial carbon reserve (gC/gSW)\nparams: string of the path to a parameters file, defaults to the 2012 values. Also supplied is 2013 in src/parameters/2013.jl or you can copy and vary them\nresp_model: choice of respiration model, 1 (default) uses the 2012 version and 2 uses the modifcations from the 2013 paper\ndt: the time step size to use (see equations! note), default is 1 day (seems small enough)\ndataframe: output as a dataframe, default to true. Alternative is an array (faster)\nλ_arr: array of normalised change of day length, defaults to nothing which generates the default one\n\nReturns:\n\nsolution: the ODE library solution\nresults: dataframe or array of area/nitrogen reserve/carbon reserve/total nitrate update. All others useful quantities can be easily derived.\n\n\n\n\n\n","category":"function"},{"location":"functions.html#Main.Kelp.solver!-Tuple{Vector{Float64}, Any, Float64}","page":"Function Documentation","title":"Main.Kelp.solver!","text":"Kelp.solver!(y, params, t)\n\nInterface for OrdinaryDiffEq library, extracts current enviromental variable values and solves equations for each timestep.\n\nParameters:\n\ny: the current state of the system as a vector (area, nitrate reserve, carbon reserve).\nparams: the variable parameters of the model:\nu_arr: interpolation object of the water speed in time\ntemp_arr: interpolation object of the temperature in time\nirr_arr: interpolation object of the irradianec in time\nex_n_arr: interpolation object of the external nitrate concentration in time\nλ_arr: array of the normalised change in day length\nresp_model: the choice of respiration model, 1 is the origional from the 2012 paper and 2 is the modified version in 2013\ndt: the time step length, this is important as it is used in the \"extreme carbon limit\" part of the equations, see NB.\nt: the current time (with respect to the time in the interpolations)\n\nReturns: array of da,dn,dc,j*a - the rate of a/n/c and the nitrate uptake rate\n\nNote: These equations must be solved with an algorithm with fixed time steps and known, constant sub timestep lengths. This is because the \"extreme carbon limit\" element is only implientable with known and fixed timesteps as the value of a  must be changed to a particular value rather than changing the deriviative. This can only be done (within the framework of the ODE library) by setting the derivitive to (X(next)-X(old))/dt\n\n\n\n\n\n","category":"method"},{"location":"functions.html#Main.Kelp.ν-Tuple{Any}","page":"Function Documentation","title":"Main.Kelp.ν","text":"Kelp.ν(a)\n\nSolves Equation 6, the specific frond erosion rate.\n\nParameters: a: area /dm^2\n\nReturns: specific frond erosion rate\n\n\n\n\n\n","category":"method"},{"location":"index.html#Kelp.jl","page":"Index","title":"Kelp.jl","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"(Image: DOI)(Image: Build Status)(Image: codecov)","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Kelp.jl  is an implimentation of the Broch and Slagstad, 2012 model of the growth and composition of Saccharina latissima.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"The main way to solve a single frond is Kelp.solvekelp and grids can be solved by Kelp.solvegrid.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Changes from the stated parameter values in the paper are detailed in changes.pdf.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"The package is not yet registered so to use, download this repository and then install the dependencies by executing (from this directory):","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":">julia\njulia> import Pkg\njulia> ] activate .\njulia> instantiate","category":"page"},{"location":"index.html#Running-a-model","page":"Index","title":"Running a model","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"These examples for running the model both at a single point and on a grid can be found in examples.ipynb.","category":"page"},{"location":"index.html#Example-1-Single-Point","page":"Index","title":"Example 1 - Single Point","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"import Pkg; Pkg.activate(\"../\")\nusing Kelp, Plots, Interpolations;pyplot();","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Set initial conditions and parameters","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"t_i - start day (days since january first) - needs to have the same date referance as the forcing data\nnd - number of days to run for\nlat - latitude as this effects the change in day length\na0,n0,c_0 - initial area, nitrogen reserve and carbon reserve","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"t_i = 1.0;nd = 600;lat = 60\na_0 = 0.1;n_0 = 0.022;c_0 = 0.3;","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Setting the forcing variables, these would normally be loaded from a data set but here will be generated","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"time - day corresponding to forcing data in days since january first (year is arbitary). This must be a float rather than an integer or ODE solving library fails\ntemp - temperature in degrees C\nno3 - nitrate concentration in mmol/m³\nirr - PAR irradiance in mol photons/m²/day\nu - water velocity in m/s","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"time = [1:2:800;]\n\ntemp = 6 * cos.((time .- 250) .* 2 .* pi ./ 365) .+ 8\nno3 = (7 .* ((cos.(time .* 2 .* pi ./ 365) .+ 1) ./ 2).^3 .+ 0.1) ./ 1000\nirr = 40 .* (sin.((time .+ 15) .* pi ./ 365).^10) .+ 1\nu = repeat([0.15],400);","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"plot(layout=grid(1,3),size=(1000,250),legend=false)\nplot!(time,temp,ylabel=\"Temp (°C)\",sp=1)\nplot!(time,no3,xlabel=\"Day\",ylabel=\"Nitrate concentration (mmol/m³)\",sp=2)\nplot!(time,irr,ylabel=\"PAR (μmol photons/m²/s)\",sp=3)","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"(Image: png)","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"The forcing variables must be converted to interpolations for the kelp model to access them at arbitary time","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"temp_itp=Interpolations.LinearInterpolation(time,temp)\nno3_itp=Interpolations.LinearInterpolation(time,no3)\nirr_itp=Interpolations.LinearInterpolation(time,irr)\nu_itp=Interpolations.LinearInterpolation(time,u);","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Now the model can be run, the parameter file must be passed and in this run the resparation model proposed in Broch, 2013 is being used","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"solution, results = Kelp.solvekelp(t_i, nd, u_itp, temp_itp, irr_itp, no3_itp, lat, a_0, n_0, c_0, \"../src/parameters/2013.jl\",2);","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Solutions contains the raw output of the ODE solver while results is refactored into a dataframe (this can optionally be turned off for an array to be returned)","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"results","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"dataframe as a table that can't be rendered here","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"It is useful to convert the results into total carbon and nitrogen masses (rather than the reserves that the model returns), this requires some of the parameters.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"include(\"../src/parameters/2013.jl\")\ntotal_carbon = results.area .* K_A .* (results.carbon .+ C_struct)\ntotal_nitrogen = results.area .* K_A .* (results.nitrogen .+ N_struct);","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"plot(layout=grid(1,3),size=(1000,250),legend=false)\nplot!(results.time,results.area,ylabel=\"Area/dm²\",sp=1)\nplot!(results.time,total_carbon,xlabel=\"Day\",ylabel=\"Total Carbon (gC)\",sp=2)\nplot!(results.time,total_nitrogen,ylabel=\"Total Nitrogen (gN)\",sp=3)","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"(Image: png)","category":"page"},{"location":"index.html#Example-2-Grid","page":"Index","title":"Example 2 - Grid","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"For a grid we must set initial conditions as with a single point","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"t_i = 1.0;nd = 300\na_0 = 0.1;n_0 = 0.022;c_0 = 0.3;","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"This time we will generate a 4d grid of input data for temp and no3 and 2d for nitrate. An aditional variable needs to be generated, either a 3d diffuse attenuation coefficient or 4d light attenuation. In this example the latter is used. Again this would usually be loaded from a file. It is benefitial to define all of these as constants as it drastically speeds up on larger grids.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"const arr_lon=[45:50;]\nconst arr_lat=[55:65;]\nconst arr_dep=[0:5:75;]\nconst arr_t = [0:2:310;]\n\nconst arr_temp = permutedims(repeat(6 * cos.((arr_t .- 250) .* 2 .* pi ./ 365) .+ 8,1,length(arr_lon),length(arr_lat),length(arr_dep)),(2,3,4,1)).*permutedims(repeat(arr_lat./arr_lat[1],1,length(arr_lon),length(arr_dep),length(arr_t)),(2,1,3,4))\nconst arr_no3 = permutedims(repeat((7 .* ((cos.(arr_t .* 2 .* pi ./ 365) .+ 1) ./ 2).^3 .+ 0.1) ./ 1000,1,length(arr_lon),length(arr_lat),length(arr_dep)),(2,3,4,1)).*repeat(arr_lon./arr_lon[1],1,length(arr_lat),length(arr_dep),length(arr_t))\nconst arr_irr = permutedims(repeat(40 .* (sin.((arr_t .+ 15) .* pi ./ 365).^10) .+ 1,1,length(arr_lon),length(arr_lat)),(2,3,1)).*permutedims(repeat(arr_lat./arr_lat[1],1,length(arr_lon),length(arr_t)),(2,1,3))\nconst arr_beta = permutedims(repeat(reverse([0:1/(length(arr_dep)-1):1;]),1,length(arr_lon),length(arr_lat),length(arr_t)),(2,3,1,4))\nconst arr_u = permutedims(repeat([0.15],length(arr_t),length(arr_lon),length(arr_lat),length(arr_dep)),(2,3,4,1));","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"These grids are directly fed to the grid solver, which returns an array. irr can have its own time provided as satellite products often do not have the same temporal resolution as models. Additionally a fill value, in this case NaN, can be provided as they are often temporally sparse and need to be filtered.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"This function automatically paralalises to however many threads you start julia with","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"@time results = Kelp.solvegrid(t_i, nd, a_0, n_0, c_0, arr_lon, arr_lat, arr_dep, arr_t, arr_no3, arr_temp, arr_u, (arr_irr, arr_t, NaN), (nothing, nothing, nothing), arr_beta, \"../src/parameters/2013.jl\", 2);","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"...","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"The output from this is an array with area/nitrogen reserve/carbon reserve/nitrate uptake in the first dimention, then lon,lat,dep,time in the others. We can extract the total carbon and nitrogen again:","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"total_carbon = results[1,:,:,:,:] .* K_A .* (results[3,:,:,:,:] .+ C_struct)\ntotal_nitrogen = results[1,:,:,:,:] .* K_A .* (results[2,:,:,:,:] .+ N_struct);","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"We could plot these for a couple of points as a comparison for above:","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"plot(layout=grid(1,3),size=(1000,300))\nresults_time=[0:nd;]\nfor r=1:10\n    i,j,k=rand([1:length(arr_lon);]),rand([1:length(arr_lat);]),rand([1:length(arr_dep);])\n    plot!(results_time,results[1,i,j,k,:],sp=1,label=\"$(arr_lat[j])N, $(arr_lon[i])W, $(arr_dep[k])m\")\n    plot!(results_time,total_carbon[i,j,k,:],sp=2)\n    plot!(results_time,total_nitrogen[i,j,k,:],sp=3)\nend\nplot!(ylabel=\"Area/dm²\",sp=1,legend=:bottomright);plot!(sp=2,xlabel=\"Day\",ylabel=\"Total Carbon (gC)\",legend=false);plot!(sp=3,ylabel=\"Total Nitrogen (gN)\",legend=false)","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"(Image: png)","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Or we could plot a heatmap of the surfaces:","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"hms=[\n    heatmap(arr_lon,arr_lat,total_carbon[:,:,1,end]',color=cgrad(:bamako, rev=true),colorbar_title=\"Total Carbon (gC)\"),\n    heatmap(arr_lon,arr_lat,total_nitrogen[:,:,1,end]',color=:lajolla,colorbar_title=\"Total Nitrogen (gN)\"),\n    heatmap(arr_lon,arr_lat,total_carbon[:,:,1,end]'./total_nitrogen[:,:,1,end]',color=cgrad(:lapaz, rev=true),colorbar_title=\"Carbon:Nitrogen ratio\")\n]\nplot!(hms...,layout=grid(1,3),size=(1000,200))","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"(Image: png)","category":"page"},{"location":"index.html#Model-Verification","page":"Index","title":"Model Verification","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"The models outputs compared with figure 3 in Broch and Slagstad 2012 are shown below: (Image: B&S2012 Figure 3 equivalent.)","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"The code to reproduce this can be found in the example folder.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"The discrepancies may be down to the inaccuracy of reporting of the model parameters or the difficulty extracting the input data from the paper. ","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Changes to the parameters from those published are detailed here.","category":"page"},{"location":"index.html#Check-on-the-sidebar-for-function-documentation","page":"Index","title":"Check on the sidebar for function documentation","text":"","category":"section"},{"location":"example.html#Example-1-Single-Point","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"","category":"section"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"import Pkg; Pkg.activate(\"../\")\nusing Kelp, Plots, Interpolations;pyplot();","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"Set initial conditions and parameters","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"t_i - start day (days since january first) - needs to have the same date referance as the forcing data\nnd - number of days to run for\nlat - latitude as this effects the change in day length\na0,n0,c_0 - initial area, nitrogen reserve and carbon reserve","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"t_i = 1.0;nd = 600;lat = 60\na_0 = 0.1;n_0 = 0.022;c_0 = 0.3;","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"Setting the forcing variables, these would normally be loaded from a data set but here will be generated","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"time - day corresponding to forcing data in days since january first (year is arbitary). This must be a float rather than an integer or ODE solving library fails\ntemp - temperature in degrees C\nno3 - nitrate concentration in mmol/m³\nirr - PAR irradiance in μmol photons/m^2/s\nu - water velocity in m/s","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"time = [1:2:800;]\n\ntemp = 6 * cos.((time .- 250) .* 2 .* pi ./ 365) .+ 8\nno3 = (7 .* ((cos.(time .* 2 .* pi ./ 365) .+ 1) ./ 2).^3 .+ 0.1) ./ 1000\nirr = 40 .* (sin.((time .+ 15) .* pi ./ 365).^10) .+ 1\nu = repeat([0.15],400);","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"plot(layout=grid(1,3),size=(1000,250),legend=false)\nplot!(time,temp,ylabel=\"Temp (°C)\",sp=1)\nplot!(time,no3,xlabel=\"Day\",ylabel=\"Nitrate concentration (mmol/m³)\",sp=2)\nplot!(time,irr,ylabel=\"PAR (μmol photons/m²/s)\",sp=3)","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"(Image: png)","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"The forcing variables must be converted to interpolations for the kelp model to access them at arbitary time","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"temp_itp=Interpolations.LinearInterpolation(time,temp)\nno3_itp=Interpolations.LinearInterpolation(time,no3)\nirr_itp=Interpolations.LinearInterpolation(time,irr)\nu_itp=Interpolations.LinearInterpolation(time,u);","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"Now the model can be run, the parameter file must be passed and in this run the resparation model proposed in Broch, 2013 is being used","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"solution, results = Kelp.solvekelp(t_i, nd, u_itp, temp_itp, irr_itp, no3_itp, lat, a_0, n_0, c_0, \"../src/parameters/2013.jl\",2);","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"Solutions contains the raw output of the ODE solver while results is refactored into a dataframe (this can optionally be turned off for an array to be returned)","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"results","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"<div class=\"data-frame\"><p>601 rows × 5 columns</p><table class=\"data-frame\"><thead><tr><th></th><th>area</th><th>nitrogen</th><th>carbon</th><th>gross_nitrate</th><th>time</th></tr><tr><th></th><th title=\"Any\">Any</th><th title=\"Any\">Any</th><th title=\"Any\">Any</th><th title=\"Any\">Any</th><th title=\"Any\">Any</th></tr></thead><tbody><tr><th>1</th><td>0.1</td><td>0.022</td><td>0.3</td><td>0.0</td><td>1.0</td></tr><tr><th>2</th><td>0.109134</td><td>0.0189379</td><td>0.267903</td><td>8.52351e-8</td><td>2.0</td></tr><tr><th>3</th><td>0.116672</td><td>0.0167756</td><td>0.247928</td><td>3.68739e-7</td><td>3.0</td></tr><tr><th>4</th><td>0.122468</td><td>0.0152978</td><td>0.237388</td><td>8.09489e-7</td><td>4.0</td></tr><tr><th>5</th><td>0.126655</td><td>0.014318</td><td>0.23388</td><td>1.36651e-6</td><td>5.0</td></tr><tr><th>6</th><td>0.129536</td><td>0.0136848</td><td>0.235377</td><td>2.00431e-6</td><td>6.0</td></tr><tr><th>7</th><td>0.131451</td><td>0.0132832</td><td>0.240287</td><td>2.69541e-6</td><td>7.0</td></tr><tr><th>8</th><td>0.132698</td><td>0.0130318</td><td>0.247446</td><td>3.42009e-6</td><td>8.0</td></tr><tr><th>9</th><td>0.133506</td><td>0.0128758</td><td>0.256043</td><td>4.16497e-6</td><td>9.0</td></tr><tr><th>10</th><td>0.134031</td><td>0.0127794</td><td>0.265536</td><td>4.92123e-6</td><td>10.0</td></tr><tr><th>11</th><td>0.134378</td><td>0.01272</td><td>0.27557</td><td>5.68316e-6</td><td>11.0</td></tr><tr><th>12</th><td>0.134615</td><td>0.0126834</td><td>0.28592</td><td>6.4471e-6</td><td>12.0</td></tr><tr><th>13</th><td>0.134782</td><td>0.0126608</td><td>0.296442</td><td>7.21063e-6</td><td>13.0</td></tr><tr><th>14</th><td>0.134907</td><td>0.0126468</td><td>0.307046</td><td>7.97216e-6</td><td>14.0</td></tr><tr><th>15</th><td>0.135005</td><td>0.0126382</td><td>0.317676</td><td>8.73057e-6</td><td>15.0</td></tr><tr><th>16</th><td>0.135087</td><td>0.0126328</td><td>0.328295</td><td>9.48508e-6</td><td>16.0</td></tr><tr><th>17</th><td>0.135158</td><td>0.0126295</td><td>0.338884</td><td>1.02351e-5</td><td>17.0</td></tr><tr><th>18</th><td>0.135223</td><td>0.0126274</td><td>0.349427</td><td>1.09801e-5</td><td>18.0</td></tr><tr><th>19</th><td>0.135284</td><td>0.0126261</td><td>0.359918</td><td>1.17197e-5</td><td>19.0</td></tr><tr><th>20</th><td>0.135342</td><td>0.0126253</td><td>0.370352</td><td>1.24535e-5</td><td>20.0</td></tr><tr><th>21</th><td>0.135398</td><td>0.0126248</td><td>0.380726</td><td>1.31812e-5</td><td>21.0</td></tr><tr><th>22</th><td>0.135452</td><td>0.0126244</td><td>0.391039</td><td>1.39026e-5</td><td>22.0</td></tr><tr><th>23</th><td>0.135506</td><td>0.0126242</td><td>0.401291</td><td>1.46173e-5</td><td>23.0</td></tr><tr><th>24</th><td>0.135559</td><td>0.012624</td><td>0.411481</td><td>1.5325e-5</td><td>24.0</td></tr><tr><th>25</th><td>0.13561</td><td>0.0126239</td><td>0.42161</td><td>1.60256e-5</td><td>25.0</td></tr><tr><th>26</th><td>0.135662</td><td>0.0126238</td><td>0.431679</td><td>1.67187e-5</td><td>26.0</td></tr><tr><th>27</th><td>0.135712</td><td>0.0126237</td><td>0.441689</td><td>1.74041e-5</td><td>27.0</td></tr><tr><th>28</th><td>0.135762</td><td>0.0126237</td><td>0.451641</td><td>1.80815e-5</td><td>28.0</td></tr><tr><th>29</th><td>0.135812</td><td>0.0126236</td><td>0.461535</td><td>1.87509e-5</td><td>29.0</td></tr><tr><th>30</th><td>0.135861</td><td>0.0126235</td><td>0.471374</td><td>1.94119e-5</td><td>30.0</td></tr><tr><th>&vellip;</th><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td></tr></tbody></table></div>","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"It is useful to convert the results into total carbon and nitrogen masses (rather than the reserves that the model returns), this requires some of the parameters.","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"include(\"../src/parameters/2013.jl\")\ntotal_carbon = results.area .* K_A .* (results.carbon .+ C_struct)\ntotal_nitrogen = results.area .* K_A .* (results.nitrogen .+ N_struct);","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"plot(layout=grid(1,3),size=(1000,250),legend=false)\nplot!(results.time,results.area,ylabel=\"Area/dm²\",sp=1)\nplot!(results.time,total_carbon,xlabel=\"Day\",ylabel=\"Total Carbon (gC)\",sp=2)\nplot!(results.time,total_nitrogen,ylabel=\"Total Nitrogen (gN)\",sp=3)","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"(Image: png)","category":"page"},{"location":"example.html#Example-2-Grid","page":"Example 1 - Single Point","title":"Example 2 - Grid","text":"","category":"section"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"For a grid we must set initial conditions as with a single point","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"t_i = 1.0;nd = 300\na_0 = 0.1;n_0 = 0.022;c_0 = 0.3;","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"This time we will generate a 4d grid of input data for temp and no3 and 2d for nitrate. An aditional variable needs to be generated, either a 3d diffuse attenuation coefficient or 4d light attenuation. In this example the latter is used. Again this would usually be loaded from a file. It is benefitial to define all of these as constants as it drastically speeds up on larger grids.","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"const arr_lon=[45:50;]\nconst arr_lat=[55:65;]\nconst arr_dep=[0:5:75;]\nconst arr_t = [0:2:310;]\n\nconst arr_temp = permutedims(repeat(6 * cos.((arr_t .- 250) .* 2 .* pi ./ 365) .+ 8,1,length(arr_lon),length(arr_lat),length(arr_dep)),(2,3,4,1)).*permutedims(repeat(arr_lat./arr_lat[1],1,length(arr_lon),length(arr_dep),length(arr_t)),(2,1,3,4))\nconst arr_no3 = permutedims(repeat((7 .* ((cos.(arr_t .* 2 .* pi ./ 365) .+ 1) ./ 2).^3 .+ 0.1) ./ 1000,1,length(arr_lon),length(arr_lat),length(arr_dep)),(2,3,4,1)).*repeat(arr_lon./arr_lon[1],1,length(arr_lat),length(arr_dep),length(arr_t))\nconst arr_irr = permutedims(repeat(40 .* (sin.((arr_t .+ 15) .* pi ./ 365).^10) .+ 1,1,length(arr_lon),length(arr_lat)),(2,3,1)).*permutedims(repeat(arr_lat./arr_lat[1],1,length(arr_lon),length(arr_t)),(2,1,3))\nconst arr_beta = permutedims(repeat(reverse([0:1/(length(arr_dep)-1):1;]),1,length(arr_lon),length(arr_lat),length(arr_t)),(2,3,1,4))\nconst arr_u = permutedims(repeat([0.15],length(arr_t),length(arr_lon),length(arr_lat),length(arr_dep)),(2,3,4,1));","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"These grids are directly fed to the grid solver, which returns an array. irr can have its own time provided as satellite products often do not have the same temporal resolution as models. Additionally a fill value, in this case NaN, can be provided as they are often temporally sparse and need to be filtered.","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"This function automatically paralalises to however many threads you start julia with","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"@time results = Kelp.solvegrid(t_i, nd, a_0, n_0, c_0, arr_lon, arr_lat, arr_dep, arr_t, arr_no3, arr_temp, arr_u, (arr_irr, arr_t, NaN), (nothing, nothing, nothing), arr_beta, \"../src/parameters/2013.jl\", 2);","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"┌ Info: At level 1\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 2\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 3\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 4\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 5\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 6\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 7\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 8\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 9\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 10\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 11\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 12\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 13\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 14\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 15\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n┌ Info: At level 16\n└ @ Kelp /home/jago/Documents/Projects/Kelp.jl/src/Kelp.jl:337\n\n\n 32.622805 seconds (135.82 M allocations: 4.460 GiB, 2.42% gc time, 25.27% compilation time)","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"The output from this is an array with area/nitrogen reserve/carbon reserve/nitrate uptake in the first dimention, then lon,lat,dep,time in the others. We can extract the total carbon and nitrogen again:","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"total_carbon = results[1,:,:,:,:] .* K_A .* (results[3,:,:,:,:] .+ C_struct)\ntotal_nitrogen = results[1,:,:,:,:] .* K_A .* (results[2,:,:,:,:] .+ N_struct);","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"We could plot these for a couple of points as a comparison for above:","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"plot(layout=grid(1,3),size=(1000,300))\nresults_time=[0:nd;]\nfor r=1:10\n    i,j,k=rand([1:length(arr_lon);]),rand([1:length(arr_lat);]),rand([1:length(arr_dep);])\n    plot!(results_time,results[1,i,j,k,:],sp=1,label=\"$(arr_lat[j])N, $(arr_lon[i])W, $(arr_dep[k])m\")\n    plot!(results_time,total_carbon[i,j,k,:],sp=2)\n    plot!(results_time,total_nitrogen[i,j,k,:],sp=3)\nend\nplot!(ylabel=\"Area/dm²\",sp=1,legend=:bottomright);plot!(sp=2,xlabel=\"Day\",ylabel=\"Total Carbon (gC)\",legend=false);plot!(sp=3,ylabel=\"Total Nitrogen (gN)\",legend=false)","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"(Image: png)","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"Or we could plot a heatmap of the surfaces:","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"hms=[\n    heatmap(arr_lon,arr_lat,total_carbon[:,:,1,end]',color=cgrad(:bamako, rev=true),colorbar_title=\"Total Carbon (gC)\"),\n    heatmap(arr_lon,arr_lat,total_nitrogen[:,:,1,end]',color=:lajolla,colorbar_title=\"Total Nitrogen (gN)\"),\n    heatmap(arr_lon,arr_lat,total_carbon[:,:,1,end]'./total_nitrogen[:,:,1,end]',color=cgrad(:lapaz, rev=true),colorbar_title=\"Carbon:Nitrogen ratio\")\n]\nplot!(hms...,layout=grid(1,3),size=(1000,200))","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"(Image: png)","category":"page"},{"location":"example.html","page":"Example 1 - Single Point","title":"Example 1 - Single Point","text":"","category":"page"}]
}
